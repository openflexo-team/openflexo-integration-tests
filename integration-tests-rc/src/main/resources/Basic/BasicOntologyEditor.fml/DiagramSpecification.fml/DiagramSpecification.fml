use org.openflexo.technologyadapter.owl.OWLModelSlot;
use org.openflexo.technologyadapter.diagram.TypedDiagramModelSlot;

/**
 * 
 * @version 0.1
 */
@VirtualModel(uri="http://www.openflexo.org/openflexo/ViewPoints/Basic/BasicOntologyEditor.fml/DiagramSpecification.fml")
public class DiagramSpecification {

  ModelSlot basicOntologyi type=OWLModelSlot$OWLModelSlotImpl_$$_jvste0e_95 conformTo="http://www.openflexo.org/openflexo/ViewPoints/BasicOntology.owl" required=true readOnly=false;
  @TypedDiagramModelSlot(metamodel="http://www.openflexo.org/openflexo/ViewPoints/Basic/BasicOntologyEditor.fml/DiagramSpecification/DiagramSpecification.diagramspecification",cardinality=ZeroOne,readOnly=false)  
  public DiagramType<DiagramSpecification> typedDiagramModelSlot;

  @FlexoConcept  
  public class Concept {  
  
    FlexoRole shape as ShapeSpecification from DiagramSpecification;  
    FlexoRole individual as Individual conformTo Concept from basicOntologyi ;  
  
    @DropScheme    
    Concept:DropConceptAtTopLevel(String name) {    
      shape = typedDiagramModelSlot.DIAGRAM::AddShape {      
        label = individual.name;      
      };      
      individual = basicOntologyi.AddOWLIndividual();    
    }    
  
  }  

  @FlexoConcept  
  public class IsARelationship {  
  
    FlexoRole connector as ConnectorSpecification from DiagramSpecification;  
    @ObjectPropertyStatementRole(cardinality=ZeroOne,readOnly=false)    
    public Statement:semanticRelation isA;  
  
    @LinkScheme    
    IsARelationship:LinkTwoConceptByIsARelationShip() {    
      connector = AddConnector$AddConnectorImpl_$$_jvste0e_92 conformTo ConnectorSpecification from typedDiagramModelSlot {      
        label = "is a";      
      };      
      isA = fromTarget.individual.semanticRelation = toTarget.individual;;    
    }    
  
  }  

  @FlexoConcept  
  public class HasRelationship {  
  
    FlexoRole connector as ConnectorSpecification from DiagramSpecification;  
    @ObjectPropertyStatementRole(cardinality=ZeroOne,readOnly=false)    
    public Statement:has has;  
  
    @LinkScheme    
    HasRelationship:LinkTwoConceptByHasRelationShip() {    
      connector = AddConnector$AddConnectorImpl_$$_jvste0e_92 conformTo ConnectorSpecification from typedDiagramModelSlot {      
        label = "has";      
      };      
      has = fromTarget.individual.has = toTarget.individual;;    
    }    
  
  }  

}
